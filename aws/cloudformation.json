{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Create the infrastructure needed to run the API",
    "Outputs": {
        "DatabaseHost": {
            "Description": "The host of the RDS instance",
            "Value": {
                "Fn::GetAtt": [
                    "Database",
                    "Endpoint.Address"
                ]
            }
        },
        "DatabaseName": {
            "Description": "The database name",
            "Value": {
                "Ref": "DatabaseName"
            }
        },
        "DatabasePort": {
            "Description": "The port of the RDS instance",
            "Value": {
                "Fn::GetAtt": [
                    "Database",
                    "Endpoint.Port"
                ]
            }
        },
        "DatabaseUsername": {
            "Description": "The username for the database",
            "Value": {
                "Ref": "DatabaseUserName"
            }
        },
        "DockerClusterName": {
            "Description": "The name of the Docker cluster",
            "Value": {
                "Ref": "ApiCluster"
            }
        },
        "DockerRepositoryUri": {
            "Description": "The URI of the Docker repository",
            "Value": {
                "Fn::Sub": [
                    "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}",
                    {
                        "RepositoryName": {
                            "Ref": "DockerRepository"
                        }
                    }
                ]
            }
        },
        "LoadBalancerDomain": {
            "Description": "The domain name of the load balancer",
            "Value": {
                "Fn::GetAtt": [
                    "LoadBalancer",
                    "DNSName"
                ]
            }
        }
    },
    "Parameters": {
        "ApiInstanceClass": {
            "AllowedValues": [
                "t3.nano",
                "t3.micro",
                "t3.small",
                "t3.medium",
                "t3.large",
                "t3.xlarge",
                "t3.2xlarge"
            ],
            "ConstraintDescription": "Must select a valid API instance type.",
            "Default": "t3.micro",
            "Description": "The API EC2 instance class.",
            "Type": "String"
        },
        "ApiInstanceCount": {
            "ConstraintDescription": "Must be 1 or more.",
            "Default": "2",
            "Description": "The number of API EC2 instances to load balance between.",
            "MinValue": "1",
            "Type": "Number"
        },
        "ApiTaskCount": {
            "ConstraintDescription": "Must be 0 or more.",
            "Default": "0",
            "Description": "The number of API containers to run.",
            "MinValue": "0",
            "Type": "Number"
        },
        "CertificateArn": {
            "Description": "The ARN for the API load balancer SSL certificate.",
            "Type": "String"
        },
        "DatabaseAllocatedStorage": {
            "ConstraintDescription": "Must be between 5 and 1024 GiB.",
            "Default": "10",
            "Description": "The size of the database (GiB).",
            "MaxValue": "1024",
            "MinValue": "5",
            "Type": "Number"
        },
        "DatabaseClass": {
            "AllowedValues": [
                "db.t3.micro",
                "db.t3.small",
                "db.t3.medium",
                "db.t3.large",
                "db.t3.xlarge",
                "db.t3.2xlarge"
            ],
            "ConstraintDescription": "Must select a valid database instance type.",
            "Default": "db.t3.micro",
            "Description": "The database instance class.",
            "Type": "String"
        },
        "DatabaseName": {
            "AllowedPattern": "[a-z0-9_]*",
            "ConstraintDescription": "Must only contain lowercase alphanumeric characters and underscores.",
            "Description": "The database schema name.",
            "MaxLength": "41",
            "MinLength": "8",
            "Type": "String"
        },
        "DatabasePassword": {
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "Must only contain alphanumeric characters.",
            "Description": "The database admin password.",
            "MaxLength": "41",
            "MinLength": "8",
            "NoEcho": true,
            "Type": "String"
        },
        "DatabaseUserName": {
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "Must only contain alphanumeric characters.",
            "Description": "The database admin name.",
            "MaxLength": "41",
            "MinLength": "8",
            "Type": "String"
        },
        "Environment": {
            "Description": "The environment this stack is for (e.g. production or staging).",
            "MinLength": "1",
            "Type": "String"
        },
        "Subnets": {
            "Description": "The list of subnet IDs, for at least two Availability Zones in the region in your Virtual Private Cloud (VPC).",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "Uuid": {
            "Default": "4713915e-14f2-475c-86b8-af4756817217",
            "Description": "The unique ID for this stack.",
            "MaxLength": "36",
            "MinLength": "36",
            "Type": "String"
        },
        "Vpc": {
            "Description": "The Virtual Private Cloud (VPC) to launch the stack in.",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Resources": {
        "ApiCluster": {
            "Type": "AWS::ECS::Cluster"
        },
        "ApiLogGroup": {
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "-",
                        [
                            "api",
                            {
                                "Ref": "Environment"
                            }
                        ]
                    ]
                },
                "RetentionInDays": 7
            },
            "Type": "AWS::Logs::LogGroup"
        },
        "ApiSecurityGroup": {
            "Properties": {
                "GroupDescription": "For connecting to the API containers",
                "SecurityGroupIngress": [
                    {
                        "Description": "Full access from the load balancer",
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupName": {
                            "Ref": "LoadBalancerSecurityGroup"
                        },
                        "ToPort": "65535"
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ApiService": {
            "DependsOn": [
                "LoadBalancerListener"
            ],
            "Properties": {
                "Cluster": {
                    "Ref": "ApiCluster"
                },
                "DeploymentConfiguration": {
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 100
                },
                "DesiredCount": {
                    "Ref": "ApiTaskCount"
                },
                "LaunchType": "EC2",
                "LoadBalancers": [
                    {
                        "ContainerName": "api",
                        "ContainerPort": 80,
                        "TargetGroupArn": {
                            "Ref": "ApiTargetGroup"
                        }
                    }
                ],
                "Role": {
                    "Ref": "ECSServiceRole"
                },
                "ServiceName": "api",
                "TaskDefinition": {
                    "Ref": "ApiTaskDefinition"
                }
            },
            "Type": "AWS::ECS::Service"
        },
        "ApiTargetGroup": {
            "DependsOn": [
                "LoadBalancer"
            ],
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckPath": "/",
                "HealthCheckPort": "traffic-port",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 5,
                "Port": 80,
                "Protocol": "HTTP",
                "TargetType": "instance",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
        },
        "ApiTaskDefinition": {
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Essential": "true",
                        "Image": {
                            "Fn::Join": [
                                ".",
                                [
                                    {
                                        "Ref": "AWS::AccountId"
                                    },
                                    "dkr.ecr",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    {
                                        "Fn::Join": [
                                            "/",
                                            [
                                                "amazonaws.com",
                                                {
                                                    "Ref": "DockerRepository"
                                                }
                                            ]
                                        ]
                                    }
                                ]
                            ]
                        },
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "ApiLogGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": "ecs"
                            }
                        },
                        "MemoryReservation": "256",
                        "Name": "api",
                        "PortMappings": [
                            {
                                "ContainerPort": "80",
                                "HostPort": "0",
                                "Protocol": "tcp"
                            }
                        ]
                    }
                ],
                "Family": {
                    "Fn::Join": [
                        "-",
                        [
                            "api",
                            {
                                "Ref": "Environment"
                            }
                        ]
                    ]
                },
                "NetworkMode": "bridge",
                "RequiresCompatibilities": [
                    "EC2"
                ]
            },
            "Type": "AWS::ECS::TaskDefinition"
        },
        "ApiUser": {
            "Properties": {
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": "s3:*",
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "UploadsBucket",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "/",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "UploadsBucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "ApiUserPolicy"
                    }
                ],
                "UserName": {
                    "Fn::Join": [
                        "-",
                        [
                            "api",
                            {
                                "Ref": "Environment"
                            }
                        ]
                    ]
                }
            },
            "Type": "AWS::IAM::User"
        },
        "AutoScalingGroup": {
            "Properties": {
                "AvailabilityZones": [
                    "eu-west-2a",
                    "eu-west-2b",
                    "eu-west-2c"
                ],
                "DesiredCapacity": {
                    "Ref": "ApiInstanceCount"
                },
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "LaunchTemplate"
                    },
                    "Version": {
                        "Fn::GetAtt": [
                            "LaunchTemplate",
                            "LatestVersionNumber"
                        ]
                    }
                },
                "MaxSize": {
                    "Ref": "ApiInstanceCount"
                },
                "MinSize": {
                    "Ref": "ApiInstanceCount"
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "CiUser": {
            "Properties": {
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": "ecr:*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "ecs:UpdateService",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "secretsmanager:GetSecretValue",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "CiUserPolicy"
                    }
                ],
                "UserName": {
                    "Fn::Join": [
                        "-",
                        [
                            "ci-api",
                            {
                                "Ref": "Environment"
                            }
                        ]
                    ]
                }
            },
            "Type": "AWS::IAM::User"
        },
        "Database": {
            "Properties": {
                "AllocatedStorage": {
                    "Ref": "DatabaseAllocatedStorage"
                },
                "DBInstanceClass": {
                    "Ref": "DatabaseClass"
                },
                "DBName": {
                    "Ref": "DatabaseName"
                },
                "DBSubnetGroupName": {
                    "Ref": "DatabaseSubnetGroup"
                },
                "Engine": "MySQL",
                "EngineVersion": "5.7",
                "MasterUserPassword": {
                    "Ref": "DatabasePassword"
                },
                "MasterUsername": {
                    "Ref": "DatabaseUserName"
                },
                "PubliclyAccessible": "false",
                "VPCSecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "DatabaseSecurityGroup",
                            "GroupId"
                        ]
                    }
                ]
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "DatabaseSecurityGroup": {
            "Properties": {
                "GroupDescription": "For connecting to the MySQL instance",
                "SecurityGroupIngress": [
                    {
                        "Description": "MySQL access from the API containers",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupName": {
                            "Ref": "ApiSecurityGroup"
                        },
                        "ToPort": "3306"
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DatabaseSubnetGroup": {
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS instance",
                "SubnetIds": {
                    "Ref": "Subnets"
                }
            },
            "Type": "AWS::RDS::DBSubnetGroup"
        },
        "DockerRepository": {
            "Properties": {
                "LifecyclePolicy": {
                    "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Remove untagged images older than 1 week\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countUnit\":\"days\",\"countNumber\":7},\"action\":{\"type\":\"expire\"}}]}"
                },
                "RepositoryName": {
                    "Fn::Join": [
                        "-",
                        [
                            "api",
                            {
                                "Ref": "Environment"
                            },
                            {
                                "Ref": "Uuid"
                            }
                        ]
                    ]
                }
            },
            "Type": "AWS::ECR::Repository"
        },
        "EC2InstanceProfile": {
            "Properties": {
                "Roles": [
                    {
                        "Ref": "ECSClusterRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "ECSClusterRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "ECSServiceRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ecs.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:AttachNetworkInterface",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:CreateNetworkInterfacePermission",
                                        "ec2:DeleteNetworkInterface",
                                        "ec2:DeleteNetworkInterfacePermission",
                                        "ec2:Describe*",
                                        "ec2:DetachNetworkInterface",
                                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                        "elasticloadbalancing:DeregisterTargets",
                                        "elasticloadbalancing:Describe*",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                        "elasticloadbalancing:RegisterTargets",
                                        "route53:ChangeResourceRecordSets",
                                        "route53:CreateHealthCheck",
                                        "route53:DeleteHealthCheck",
                                        "route53:Get*",
                                        "route53:List*",
                                        "route53:UpdateHealthCheck",
                                        "servicediscovery:DeregisterInstance",
                                        "servicediscovery:Get*",
                                        "servicediscovery:List*",
                                        "servicediscovery:RegisterInstance",
                                        "servicediscovery:UpdateInstanceCustomHealthStatus"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "ec2:CreateTags"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "arn:aws:ec2:*:*:network-interface/*"
                                }
                            ]
                        },
                        "PolicyName": "ECSServiceRolePolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "LaunchTemplate": {
            "Properties": {
                "LaunchTemplateData": {
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvdcz",
                            "Ebs": {
                                "DeleteOnTermination": "true",
                                "VolumeSize": 22,
                                "VolumeType": "gp2"
                            }
                        }
                    ],
                    "IamInstanceProfile": {
                        "Arn": {
                            "Fn::GetAtt": [
                                "EC2InstanceProfile",
                                "Arn"
                            ]
                        }
                    },
                    "ImageId": "ami-0f82969826859fb14",
                    "InstanceInitiatedShutdownBehavior": "terminate",
                    "InstanceType": {
                        "Ref": "ApiInstanceClass"
                    },
                    "Monitoring": {
                        "Enabled": "true"
                    },
                    "SecurityGroups": [
                        {
                            "Ref": "ApiSecurityGroup"
                        }
                    ],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "#!/bin/bash\n",
                                    "echo ECS_CLUSTER=",
                                    {
                                        "Ref": "ApiCluster"
                                    },
                                    " >> /etc/ecs/ecs.config;echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;"
                                ]
                            ]
                        }
                    }
                },
                "LaunchTemplateName": {
                    "Fn::Join": [
                        "-",
                        [
                            "api-launch-template",
                            {
                                "Ref": "Environment"
                            }
                        ]
                    ]
                }
            },
            "Type": "AWS::EC2::LaunchTemplate"
        },
        "LoadBalancer": {
            "Properties": {
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "LoadBalancerSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "Subnets": {
                    "Ref": "Subnets"
                }
            },
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer"
        },
        "LoadBalancerListener": {
            "Properties": {
                "Certificates": [
                    {
                        "CertificateArn": {
                            "Ref": "CertificateArn"
                        }
                    }
                ],
                "DefaultActions": [
                    {
                        "TargetGroupArn": {
                            "Ref": "ApiTargetGroup"
                        },
                        "Type": "forward"
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "LoadBalancer"
                },
                "Port": 443,
                "Protocol": "HTTPS"
            },
            "Type": "AWS::ElasticLoadBalancingV2::Listener"
        },
        "LoadBalancerSecurityGroup": {
            "Properties": {
                "GroupDescription": "For connecting to the API load balancer",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "HTTP access from the public",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "HTTPS access from the public",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ReadOnlyDatabase": {
            "Properties": {
                "DBInstanceClass": {
                    "Ref": "DatabaseClass"
                },
                "Engine": "MySQL",
                "EngineVersion": "5.7",
                "PubliclyAccessible": "true",
                "SourceDBInstanceIdentifier": {
                    "Ref": "Database"
                },
                "VPCSecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "ReadOnlyDatabaseSecurityGroup",
                            "GroupId"
                        ]
                    }
                ]
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "ReadOnlyDatabaseSecurityGroup": {
            "Properties": {
                "GroupDescription": "For connecting to the read only replica MySQL instance",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "64.18.0.0/20",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "64.233.160.0/19",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "66.102.0.0/20",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "66.249.80.0/20",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "72.14.192.0/18",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "74.125.0.0/16",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "108.177.8.0/21",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "173.194.0.0/16",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "207.126.144.0/20",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "209.85.128.0/17",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "216.58.192.0/19",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": "216.239.32.0/19",
                        "Description": "MySQL access from Data Studio",
                        "FromPort": "3306",
                        "IpProtocol": "tcp",
                        "ToPort": "3306"
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "UploadsBucket": {
            "Properties": {
                "AccessControl": "Private",
                "BucketName": {
                    "Fn::Join": [
                        "-",
                        [
                            "uploads",
                            {
                                "Ref": "Environment"
                            },
                            {
                                "Ref": "Uuid"
                            }
                        ]
                    ]
                }
            },
            "Type": "AWS::S3::Bucket"
        }
    }
}
